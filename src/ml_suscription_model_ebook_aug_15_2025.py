# -*- coding: utf-8 -*-
"""ML suscription model Ebook Aug 15 2025

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YcASROSzX7IyR4DXFb3ysmecrZ7_R3MS
"""

#code Snippet 1
#setting pycaret for predictor ML model
!pip install pycaret

# Code snippet updated 2
import pandas as pd
from datetime import datetime

# Importing the data for ML modeling predictor on 'Avg Monthly Spend'
df = pd.read_csv('https://raw.githubusercontent.com/Imjuandiaz/Customer_data_Ebook/refs/heads/main/Customer%20Data%20Apr%202024%20-%20Customer%20Data.csv')

# Extract/split Values in feature 'City-ZipCode-State'
df[['City', 'ZipCode', 'State']] = df['City-ZipCode-State'].str.split('-', expand=True)

# Calculate Age, correcting two-digit years
def calculate_age(born):
    today = datetime.today()
    age = today.year - born.year - ((today.month, today.day) < (born.month, born.day))
    if age < 0:  # Correct negative ages caused by 1900s vs 2000s
        age += 100
    return age

# Convert Birth Date and calculate Age
df['birth_date_dt'] = pd.to_datetime(df['Birth Date'], format='%m/%d/%y', errors='coerce')
df.dropna(subset=['birth_date_dt'], inplace=True)
df['Age'] = df['birth_date_dt'].apply(calculate_age)
df['Age'] = df['Age'].astype(int)
df.drop(columns=['birth_date_dt'], inplace=True)

# Drop original and unnecessary columns used during training
df = df.drop(columns=['City-ZipCode-State', 'Title' ,'Suffix','Middle Name','Street Address2',
                      'Customer ID', 'First Name', 'Last Name', 'Street Address1', 'Birth Date'])

# Check final cleaned dataframe
df

#Code snippet 3
#displaying columns
df.columns

#code snippet 4
#setting up the classification pycaret ML model
from pycaret.classification import *

# Code snippet 5
# Setting the target variable
y = 'eBook Subscriber Flag'

# Code snippet 6
# Setting the ignored variables(noise variables, redundant variables,  variables that are missing more than 20% data etc)
ignored_cols = ['City-ZipCode-State', 'Title' ,'Suffix','Middle Name','Street Address2', 'Customer ID', 'First Name', 'Last Name', 'Street Address1', 'Birth Date', 'Avg Monthly Spend']

# Code snippet 7
# Setting the numerical variables
num_cols = ['Number of Cars Owned',
       'Number of Children At Home', 'Total Number of Children',
       'Annual Income','Age','Home Owner Status']

# Code snippet 8
# Setting the categorical variables
cat_cols = ['Education Level', 'Occupation', 'Gender','City','ZipCode', 'State','Marital Status']

# Code snippet 9
# Setting up/configuring the pycaret setup for Classification ML modeling
classification_setup = setup(df,
                        target = y,
                        ignore_features = ignored_cols,
                        categorical_features = cat_cols,
                        numeric_features = num_cols, train_size = 0.7)

#code snippet 10
# Running pycaret to invoke ML algorithms
compare_models()

# Code snippet 11
# Building the model with the best algorithm
best_model = create_model('gbc')

# Code snippet 12
# Predicting 'eBook Subscriber Flag' on a dataset
predictions = predict_model(best_model, df)

# Code snippet 13
# Exporting predictions to a csv file
predictions.to_csv('gbc Ebook predictions.csv')

# Code snippet 14
# Importing the client data (for which the 'Avg Month Spend' predictions need to be made)
client_data = pd.read_csv('https://raw.githubusercontent.com/Imjuandiaz/Customer_data_Ebook/refs/heads/main/Customer%20Data%20Apr%202024%20-%20Customer%20Data.csv')

# Extract/split Values in feature  'City-ZipCode-State'
client_data[['City', 'ZipCode', 'State']] = client_data['City-ZipCode-State'].str.split('-', expand=True)

# Calculate Age, similar to the training data
def calculate_age(born):
    today = datetime.today()
    age = today.year - born.year - ((today.month, today.day) < (born.month, born.day))
    if age < 0:  # Correct negative ages caused by 1900s vs 2000s
        age += 100
    return age


client_data['birth_date_dt'] = pd.to_datetime(client_data['Birth Date'], format='%m/%d/%y', errors='coerce')
client_data.dropna(subset=['birth_date_dt'], inplace=True)
client_data['Age'] = client_data['birth_date_dt'].apply(calculate_age)
client_data['Age'] = client_data['Age'].astype(int)
client_data.drop(columns=['birth_date_dt'], inplace=True)


# Drop original and unnecessary columns used during training
client_data = client_data.drop(columns=['City-ZipCode-State', 'Title' ,'Suffix','Middle Name','Street Address2', 'Customer ID', 'First Name', 'Last Name', 'Street Address1', 'Birth Date'])


client_data

# Code snippet 15
# Predicting 'eBook Subscriber Flag' for the client dataset
client_predictions = predict_model(best_model, client_data)

# Code snippet 16
# Predicting 'eBook Subscriber Flag' for the client dataset
client_predictions = predict_model(best_model, client_data)


# Renaming label as Predicted 'eBook Subscriber Flag' and rounding it to 2 decimals
client_predictions = client_predictions.rename(columns = {'Label':'eBook Subscriber Flag'}).round(2)


# Exporting 'eBook Subscriber Flag' predictions to a csv file
client_predictions.to_csv('Final gbc Subcription Ebook Prediction.csv')

#code snippet 17
# getting the parameter for the Regression ML model
best_model_params = best_model.get_params()

#code snippet 18
#Print the Diccionary of Parameters
import pprint
pprint.pprint(best_model_params)