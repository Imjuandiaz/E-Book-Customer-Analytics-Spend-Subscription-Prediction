# -*- coding: utf-8 -*-
"""Ebook Case Cluster - Aug 2025

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mZRfE5WuQgoIbNZDYM0gB3C0geUgXId2
"""

#code snippet 1
#Installing h2o
!pip install h2o

#code snippet 2
#Importing h2o
import h2o

#initialize h2o
h2o.init()

# Code snippet 3
# Importing dataset
data = h2o.import_file('https://raw.githubusercontent.com/Imjuandiaz/Customer_data_Ebook/refs/heads/main/Customer%20Data%20Apr%202024%20-%20Customer%20Data.csv')


data

#code snippet 4
#Importing Kmeans Estimator
from h2o.estimators.kmeans import H2OKMeansEstimator

#code snippet 5
#setting the number of clusters in the data train as 4
kmeans_model = H2OKMeansEstimator(k=3)

#Train the clustering model
kmeans_model.train(training_frame=data)

#code snippet 6
#Displaying the cluster size
kmeans_model.size()

import pandas as pd
data.dtypes

# ============================================
# Code Snippet 7 - Customer Dataset Clustering
# ============================================

# Import libraries
import pandas as pd

# Predict clusters for each row
pred = kmeans_model.predict(data)

# Join prediction to the original dataset
data_with_clusters = data.cbind(pred)

# Convert to pandas DataFrame
df = data_with_clusters.as_data_frame()

# ==========================
# Numeric variables
# ==========================
numeric_cols = [
    "Birth Date",
    "Home Owner Status",
    "Number of Cars Owned",
    "Number of Children At Home",
    "Total Number of Children",
    "Annual Income",
    "Avg Monthly Spend",
    "eBook Subscriber Flag"
]

# Calculate the average of each numeric variable per cluster
numeric_summary = df.groupby("predict")[numeric_cols].mean()

# ==========================
# Categorical variables
# ==========================
categorical_cols = [
    "Education Level",
    "Occupation",
    "Gender",
    "Marital Status"
]

# Calculate the distribution (percentages) of categories per cluster
categorical_summary = {}
for col in categorical_cols:
    categorical_summary[col] = (
        df.groupby("predict")[col]
        .value_counts(normalize=True)
        .unstack(fill_value=0)
    )

# ==========================
# Combine summaries
# ==========================

# Merge all categorical summary DataFrames into a single DataFrame
categorical_df = pd.concat(categorical_summary.values(), axis=1)

# Combine numeric and categorical summaries into a single profile per cluster
cluster_profiles = numeric_summary.join(categorical_df, how="left")

# Export the final cluster profiles to a CSV file
cluster_profiles.to_csv("cluster_profiles.csv", index=True)

# Display the result in the console
print(cluster_profiles)