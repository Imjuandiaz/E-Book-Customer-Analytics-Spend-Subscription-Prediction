# -*- coding: utf-8 -*-
"""Customer_Ebooks_Data_EDA_Aug2025

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CGGDRPjcI2BaWkSqf56_LbL6-Gkx7nX_
"""

#Setting csv file
import pandas as pd
df = pd.read_csv('https://raw.githubusercontent.com/Imjuandiaz/Customer_data_Ebook/refs/heads/main/Customer%20Data%20Apr%202024%20-%20Customer%20Data.csv')

df

#columns on the dataset
df.columns

#Creating Statistical Descriptive analisys of data

df.describe()

#Displaying missgno package to avoid +80% missing data
import missingno as msno
msno.bar(df)

#Dropping ,'Middle Name','Street Address2','Customer ID', 'First Name', 'Last Name', 'Street Address1', because of missing +80%data
df = df.drop(['Title' ,'Suffix','Middle Name','Street Address2','Customer ID', 'First Name', 'Last Name', 'Street Address1'],axis=1)
df.shape

#Extractic/split Values in feature  'City-ZipCode-State
data1 = {'Customer ID': [101, 102, 103],
        'City-ZipCode-State': ['Cleveland-44101-Ohio', 'Omaha-68101-Nebraska', 'New York-10001-New York']}
df = pd.DataFrame(df)


# --- Aplica las funciones ---

# 1. Separar la columna
df[['City', 'ZipCode', 'State']] = df['City-ZipCode-State'].str.split('-', expand=True)

# 2. Eliminar la columna original (opcional)
df = df.drop(columns=['City-ZipCode-State'])


# --- Ver el resultado ---
print(df)

# Import necessary libraries
from datetime import datetime
import pandas as pd

# 1. Define the function to calculate age, corrected for negative ages
def calculate_age(born):
    today = datetime.today()
    age = today.year - born.year - ((today.month, today.day) < (born.month, born.day))
    if age < 0:  # Correct negative ages caused by 1900s vs 2000s
        age += 100
    return age

# 2. Convert your 'Birth Date' column to datetime format.
df['birth_date_dt'] = pd.to_datetime(df['Birth Date'], format='%m/%d/%y', errors='coerce')

# 3. Drop rows with invalid dates
df.dropna(subset=['birth_date_dt'], inplace=True)

# 4. Create the new 'Age' column by applying the function
df['Age'] = df['birth_date_dt'].apply(calculate_age)

# 5. Convert the age to integer
df['Age'] = df['Age'].astype(int)

# 6. Drop the intermediate datetime column
df.drop(columns=['birth_date_dt'], inplace=True)

# Optional: Check result
print(df[['Birth Date', 'Age']].head())

#drop column 'Birth Date' instead of AGE
df = df.drop(columns=['Birth Date'])


df

df.columns

# Installing ydata profiling package for detailed data profiling (Exploratory Data Analysis, EDA)
!pip install -U ydata-profiling

#installing ydata profiling package for detailed data profiling
from ydata_profiling import ProfileReport
profile = ProfileReport(df)
profile.to_file(output_file='customer_Data_Ebook_2025.html')

#installing significant correlated test package dython
!pip install dython

#setting correlations test on the 'Avg Monthly Spend' and 'eBook Subscriber Flag'
import dython
from dython.nominal import associations

#running assoc funtion
assoc = associations(df)

# Storing the correlations in a matrix
assoc_matrix = assoc['corr']

# Setting the target variable eBook Subscriber Flag
target = 'eBook Subscriber Flag'


# List the associated variables in the descending order of influence on the target variable
assoc_matrix[target].abs().sort_values(ascending=False)

# Setting the target variable Avg Monthly Spend
target = 'Avg Monthly Spend'


# List the associated variables in the descending order of influence on the target variable
assoc_matrix[target].abs().sort_values(ascending=False)

# Installing AutoViz package for auto visualizations
!pip install autoviz

# Importing Autoviz modules
from autoviz.AutoViz_Class import AutoViz_Class


# Starting the Autoviz instance
AV = AutoViz_Class()




# Generating visuals using AutoViz modules
AV.AutoViz(df, verbose = 2, depVar= 'Avg Monthly Spend')

# Starting the Autoviz instance
AV = AutoViz_Class()




# Generating visuals using AutoViz modules
AV.AutoViz(df, verbose = 2, depVar= 'eBook Subscriber Flag')